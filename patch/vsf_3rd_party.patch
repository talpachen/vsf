 source/component/3rd-party/btstack/raw/src/l2cap.c | 4 ++--
 source/component/3rd-party/coremark/raw/core_main.c | 2 +-
 source/component/3rd-party/lua/raw/lua.c | 2 +-
 source/component/3rd-party/zlib/raw/inftrees.c | 10 +++-------
 source/component/3rd-party/zlib/raw/zconf.h | 3 +++
 5 file changed, 10 insertions(+), 11 deletions(-)

diff --git a/source/component/3rd-party/btstack/raw/src/l2cap.c b/source/component/3rd-party/btstack/raw/src/l2cap.c
index fe9f5ca8e..edac99c75 100644
--- a/source/component/3rd-party/btstack/raw/src/l2cap.c
+++ b/source/component/3rd-party/btstack/raw/src/l2cap.c
@@ -164,7 +164,7 @@ static inline l2cap_service_t * l2cap_le_get_service(uint16_t psm);
 #endif
 #ifdef L2CAP_USES_CHANNELS
 static uint16_t l2cap_next_local_cid(void);
-static l2cap_channel_t * l2cap_get_channel_for_local_cid(uint16_t local_cid);
+l2cap_channel_t * l2cap_get_channel_for_local_cid(uint16_t local_cid);
 static void l2cap_emit_simple_event_with_cid(l2cap_channel_t * channel, uint8_t event_code);
 static void l2cap_dispatch_to_channel(l2cap_channel_t *channel, uint8_t type, uint8_t * data, uint16_t size);
 static l2cap_channel_t * l2cap_create_channel_entry(btstack_packet_handler_t packet_handler, l2cap_channel_type_t channel_type, bd_addr_t address, bd_addr_type_t address_type,
@@ -1135,7 +1135,7 @@ static l2cap_fixed_channel_t * l2cap_fixed_channel_for_channel_id(uint16_t local
 
 // used for Classic Channels + LE Data Channels. local_cid >= 0x40
 #ifdef L2CAP_USES_CHANNELS
-static l2cap_channel_t * l2cap_get_channel_for_local_cid(uint16_t local_cid){
+l2cap_channel_t * l2cap_get_channel_for_local_cid(uint16_t local_cid){
     if (local_cid < 0x40u) return NULL;
     return (l2cap_channel_t*) l2cap_channel_item_by_cid(local_cid);
 }

diff --git a/source/component/3rd-party/coremark/raw/core_main.c b/source/component/3rd-party/coremark/raw/core_main.c
index 356f4e8..5f58366 100644
--- a/source/component/3rd-party/coremark/raw/core_main.c
+++ b/source/component/3rd-party/coremark/raw/core_main.c
@@ -112,7 +112,7 @@ main(void)
     char *argv[1];
 #else
 MAIN_RETURN_TYPE
-main(int argc, char *argv[])
+coremark_main(int argc, char *argv[])
 {
 #endif
     ee_u16       i, j = 0, num_algorithms = 0;

diff --git a/source/component/3rd-party/lua/raw/lua.c b/source/component/3rd-party/lua/raw/lua.c
index b5b884b6..ee995e78 100644
--- a/source/component/3rd-party/lua/raw/lua.c
+++ b/source/component/3rd-party/lua/raw/lua.c
@@ -620,7 +620,7 @@ static int pmain (lua_State *L) {
 }
 
 
-int main (int argc, char **argv) {
+int lua_main (int argc, char **argv) {
   int status, result;
   lua_State *L = luaL_newstate();  /* create state */
   if (L == NULL) {

diff --git source/component/3rd-party/zlib/raw/inftrees.c source/component/3rd-party/zlib/raw/inftrees.c
index 2ea08fc..8685887 100644
--- source/component/3rd-party/zlib/raw/inftrees.c
+++ source/component/3rd-party/zlib/raw/inftrees.c
@@ -29,13 +29,9 @@ const char inflate_copyright[] =
    table index bits.  It will differ if the request is greater than the
    longest code or if it is less than the shortest code.
  */
-int ZLIB_INTERNAL inflate_table(type, lens, codes, table, bits, work)
-codetype type;
-unsigned short FAR *lens;
-unsigned codes;
-code FAR * FAR *table;
-unsigned FAR *bits;
-unsigned short FAR *work;
+int ZLIB_INTERNAL inflate_table (codetype type, unsigned short FAR *lens,
+                             unsigned codes, code FAR * FAR *table,
+                             unsigned FAR *bits, unsigned short FAR *work)
 {
     unsigned len;               /* a code's length in bits */
     unsigned sym;               /* index of code symbols */

diff --git source/component/3rd-party/zlib/raw/zconf.h source/component/3rd-party/zlib/raw/zconf.h
index 5e1d68a..c7524b0 100644
--- source/component/3rd-party/zlib/raw/zconf.h
+++ source/component/3rd-party/zlib/raw/zconf.h
@@ -8,6 +8,9 @@
 #ifndef ZCONF_H
 #define ZCONF_H
 
+#undef _WIN32
+#define HAVE_UNISTD_H
+
 /*
  * If you *really* need a unique prefix for all types and library functions,
  * compile with -DZ_PREFIX. The "standard" zlib should be compiled without it.
